# -*- coding: utf-8 -*-
"""Data Structure Advance.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1HmxX3hPqUMe8A3k6XoQGGBgPdXIm5vva

## Name: Shivanshu Singh Parihar
# Batch : September 2024
# Assignment Date: 15 Oct 2024
# Assignment : Data Structure Advance

###                                 Assignment -4

**1.	Write a code to reverse a string.**

Ans:
"""

input_string = "Shivanshu"
def reverse_string(s):
    return s[::-1]
reversed_string = reverse_string(input_string)
print(reversed_string)

"""**2. Write a code to count the number of vowels in a string.**

Ans:
"""

def count_vowels(s):
    vowels = 'aeiouAEIOU'
    count = sum(1 for char in s if char in vowels)
    return count
input_string = "Shivanshu Singh Parihar"
vowel_count = count_vowels(input_string)
print(f"Number of vowels: {vowel_count}")

"""**3.	Write a code to check if a given string is a palindrome or not.**

Ans:
"""

def is_palindrome(s):
    # Remove spaces and convert to lowercase
    cleaned_string = ''.join(s.split()).lower()
    return cleaned_string == cleaned_string[::-1]
input_string = "A man a plan a canal Panama"
if is_palindrome(input_string):
    print(f'"{input_string}" is a palindrome.')
else:
    print(f'"{input_string}" is not a palindrome.')

"""**4.	Write a code to check if two given strings are anagrams of each other.**

Ans:
"""

def are_anagrams(str1, str2):
    # Normalize by removing spaces and converting to lowercase
    str1 = ''.join(str1.split()).lower()
    str2 = ''.join(str2.split()).lower()

    # Now weCheck if sorted characters are the same
    return sorted(str1) == sorted(str2)

# Example usage
string1 = "listen"
string2 = "silent"

if are_anagrams(string1, string2):
    print(f'"{string1}" and "{string2}" are anagrams.')
else:
    print(f'"{string1}" and "{string2}" are not anagrams.')

"""**5. Write a code to find all occurrences of a given substring within another string.**

Ans:
"""

def find_occurrences(main_string, substring):
    start = 0
    occurrences = []

    while True:
        start = main_string.find(substring, start)
        if start == -1:
            break
        occurrences.append(start)
        start += 1
    return occurrences
main_string = "This is a test. This test is only a test."
substring = "test"
occurrences = find_occurrences(main_string, substring)

print(f'Occurrences of "{substring}": {occurrences}')

"""**6.write a code to perform basic string compression using the counts of repeated charactres.**

Ans:
"""

s = "aabcccccaaa"
compressed = []
count = 1

for i in range(1, len(s)):
    if s[i] == s[i - 1]:
        count += 1
    else:
        compressed.append(s[i - 1] + str(count))
        count = 1

compressed.append(s[-1] + str(count))

compressed_string = ''.join(compressed)
print(compressed_string)

"""**7. Write a code to determine if a string has all unique characters.**

Ans:
"""

txt = input("Enter a text:")
t_set = set()
for i in txt:
  t_set.add(i)

if len(txt) == len(t_set):
  print ("txt contains all unique chars.")
else:
  print("txt contains duplicate chars.")

"""**8. Write a code to convert a given string to upper or lower case.**

Ans:
"""

txt = input("Enter a text:")
s_txt = txt.swapcase()
print (s_txt)

"""**9. Write a code to count the number words in a string.**

Ans:
"""

txt = input ("Enter any text:")
list1 = txt.split()
w_count = len (list1)
print ("w_count = ", w_count )

"""**10. Write a code to concatenete two strings without using the + operator.**

Ans:
"""

txt1 = input ("Enter 1st string:")
txt2 = input ("Enter 2nd string:")

c_txt = f"{txt1}{txt2}"
print (c_txt)

"""**11. Write a code to remove occurence of a specific element from a list.**

Ans:
"""

list1 = [10, 5, 20, 2, 37, 28, 22, 50, 30, 44, 2, 55, 57, 5, 50, 50 ]
r_value = int(input("Enter the value to be removed:"))
for i in list1:
    if i == r_value:
      list1.remove(r_value)
print (list1)

"""**12. Write a code to find the second largest number in a given list of integer.**

Ans:
"""

list1 = [10, 100, 1000, 2000, 50, 90, 77, 500, 97]
list2 = []
highest = max(list1)

i=0
while i <= (len(list1) -1):
    if list1[i] < highest:
        list2.append(list1[i])
    i+=1

second_largest_number = max(list2)
print ("second largest no. in the list:",second_largest_number)

"""**13. Create a code to count the occurrences of each element in a list and return a dictionary with elements as keys and their counts as values.**

Ans:

"""

list1 = ["a", "Python", 3, 4, "a", 4, 5, "Python", 7]
key1 = []
values1 = []
dict1 = dict()

i = 0
while i < (len(list1)):
  if list1[i] in key1:
    i += 1
    continue
  else:
    key1.append(list1[i])
    count1 = list1.count(list1[i])
    values1.append(count1)
    i += 1

for x,y in zip(key1,values1):
  dict1 [x] = y

print (dict1)

"""**14. Write a code to reverse a list in-place without using any built-in reverse function.**

Ans:
"""

list1 = [10, 15, True, "Python", "Building", (3+6j), 90, 500]
rev_list1 = list1 [::-1]
print (rev_list1)

"""**15. Implement a code to find and remove duplicates from a list while preserving the original order of elements.**

Ans:
"""

list1 = [1, 2, 3, 4, 1, "Python", 3 , "Python"]
list2 = []
i = 0
while i < (len(list1)):
  count = list1.count(list1[i])
  if count == 1:
    list2.append (list1[i])
    i +=1
  else:
    if list1[i] in list2:
      i +=1
      continue
    else:
      list2.append(list1[i])
      i += 1
print (list2)

"""**16. Create a code to check if a given list is sorted (either in ascending or descending order) or not.**

Ans:
"""

list1 = [1, 2, 90, 500, 4, 55, 67, 40]
Asc_list1 = sorted(list1)
Desc_list1 = sorted(list1, reverse = True)

if list1 == Asc_list1:
  print ("List1 is sorted in Ascending order.")
elif list1 == Desc_list1:
  print ("List1 is sorted in descending order.")
else:
  print ("List1 is not sorted.")

"""**17. Write a code to merge two sorted lists into a single sorted list.**

Ans:
"""

lst1 = [25, 35, 45, 65, 85, 95]
lst2 = [20, 30, 40, 60, 80, 90]
lst3 = sorted (lst1 + lst2)
print(lst3)

"""**18. Implement a code to find intersection of two given lists.**

Ans:
"""

lst1 = (input ("Enter 1st list members separated by comma: ")).split(',')
lst2 = (input ("Enter 2nd list members separated by comma: ")).split(',')

set1 = set(lst1)
set2 = set(lst2)
set3 = set1.intersection(set2)
print (list(set3))

"""**19. create a code to find union of two lists without duplicates.**

Ans:
"""

list1 = (input ("Enter 1st list members separated by comma: ")).split(',')
list2 = (input ("Enter 2nd list members separated by comma: ")).split(',')

set1 = set(list1)
set2 = set(list2)
print (set1.union(set2))

"""**20. Write a code to shuffle a given list randomly without using any built-in shuffle functions.**

Ans:
"""

import random
def shuffle_list(lst):
    n = len(lst)
    for i in range(n-1, 0, -1):
        j = random.randint(0, i)
        lst[i], lst[j] = lst[j], lst[i]
    return lst


original_list = [1, 2, 3, 4, 5]
shuffled_list = shuffle_list(original_list.copy())
print("Original list:", original_list)
print("Shuffled list:", shuffled_list)

"""**21. Write a code that takes two tuples as input and returns a new tuple containing elements that are common to both input tuples.**

Ans:

"""

tple1 = (1, 2, 3, 4)
tple2 = (2, 3, 5, 6)

set1 = set (tple1)
set2 = set (tple2)
set3 = set1.intersection(set2)
tple3 = tuple(set3)
print (tple3)

"""**22. Create a code that prompts the user to enter two sets of integers separated by comma.Then print the intersection of these two sets.**

Ans:
"""

lst1 = input("Enter the first set of integers, separated by commas: ")
lst1 = lst1.split (",")
set1 = set(int(i) for i in lst1 )

lst2 = input("Enter the first set of integers, separated by commas: ")
lst2 = lst2.split (",")
set2 = set(int(i) for i in lst2 )

c_members = set1.intersection(set2)
print("Intersection of set1 & set2:", c_members)

"""**23. Write a code to concatenate two tuples. The function should take two tuples as input and return a new tuple containing elements from both input tuples.**

Ans:
"""

def concatenate_tuples (tuple_1,tuple_2):
    return (tuple_1 + tuple_2)

tuple_1 = (1,2,3)
tuple_2 = (5,7,8)
tuple_3 = concatenate_tuples(tuple_1, tuple_2)
print (tuple_3)

""" **24. Develop a code that prompts a user to input two sets of strings. Then print the elements that are present in the first set but not in the second set.**

 Ans:

"""

str1 = input ("Enter set of String_1 separated by spaces: ")
set1 = set(str1.split())

str2 = input ("Enter set of string_2 separated by spaces: ")
set2 = set(str2.split())

set3 = set1 - set2

print ("Elemnets present in str1 but not in str2", set3)

"""**25. Create a code that takes a tuple and two integers as input. The function should return a new tuple containing elements from the original tuple within the specified range of indices.**

Ans:
"""

def slice_tuple(input_tuple, start_index, end_index):
    return input_tuple[start_index:end_index]

input_tuple = (10, 260, 300, 409, 507, 605, 70)
start_index = 2
end_index = 5
result = slice_tuple(input_tuple, start_index, end_index)

print("Sliced tuple:", result)

"""**26. Write a code that prompts the user to input two sets of characters. Then, print the union of these two sets.**

Ans:
"""

set1 = set(input ("Enter set of characters separated by spaces: ").split())

set2 = set(input ("Enter set of characters separated by spaces: ").split())

union_set = set1.union(set2)
print ("Union of Set1 and set2: ", union_set)

"""**27. Develope a code that takes a tuple of integers as input. The function should return the maximum and minimum values from the tuple using tuple unpacking.**

Ans:

"""

def find_max_min(numbers):
    max_val, min_val = max(numbers), min(numbers)
    return max_val, min_val

numbers = (10, 5, 90, 60,26)
find_max_min(numbers)

"""**28. create a code that defines two sets of integers. Then find the union, intersection and difference of these two sets.**

Ans;
"""

s1= {1, 2, 4, 3,6}
s2= {5, 6, 8, 9, 4, 6}
union_set = s1.union(s2)
intersection_set = s1.intersection(s2)
Difference_set = s1.difference(s2)
print("union of s1 and s2:", union_set)
print("Intersection of s1 and s2:", intersection_set)
print ("Difference of s1 and s2:", Difference_set)

"""**29. Write a code that takes a tuple and an integer as input. The function should return the count of occurance of the given elemnet in the tuple.**

Ans:
"""

def count_occurance(tuple1, element):
  return tuple1.count(element)

tuple1 = (109,34,65,78,32,(-3+5j),78,34,32,78,1098)
element = int(input("Enter any element from the given tuple: "))

occurances = count_occurance(tuple1, element)
print(occurances)

"""**30. Develope a code that prompts the user to input two sets of strings. Then print the symmetric difference of these two sets.**

Ans:
"""

set1_input = input("Enter the first set of strings,separated by commas: ")
set1 = set(set1_input.split(','))

set2_input = input("Enter the second set of strings,separated by commas: ")
set2 = set(set2_input.split(','))

symmetric_diff = set1.symmetric_difference(set2)
print("The symmetric difference between the two sets is:", symmetric_diff)

"""**31. Write a code that takes a list of words as input and returns a dictionary where the keys are unique words and the values are the frequencies of those words in the input list.**

Ans:
"""

words = input("Enter a list of words separated by spaces: ").split()

word_frequency = {}

for word in words:
    if word in word_frequency:
        word_frequency[word] += 1
    else:
        word_frequency[word] = 1

print("Word Frequencies:", word_frequency)

"""**32. Write a code that takes two dictionaries as input and merges them into a single dictionary. If there are common keys, the vales should be added together.**

Ans:
"""

dict1 = eval(input("Enter the first dictionary: "))
dict2 = eval(input("Enter the second dictionary: "))

merged_dict = dict1.copy()

for key, value in dict2.items():
    if key in merged_dict:
        merged_dict[key] += value
    else:
        merged_dict[key] = value


print("Merged Dictionary:", merged_dict)

"""**33. Write a code to access a value in a nested dictionary. The function should take the dictionary and a list of keys as input, and return the corresponding value. If any of the keys do not exist in the dictionary, the function should return None.**

Ans:
"""

def get_nested_value(d, keys):
    for key in keys:
        if isinstance(d, dict) and key in d:
            d = d[key]
        else:
            return None
    return d

nested_dict = {'a': {'b': {'c': 'value'}}}

keys = ['a', 'b', 'c']
print(get_nested_value(nested_dict, keys))

keys = ['a', 'b', 'd']
print(get_nested_value(nested_dict, keys))

"""**34. Write a code that takes a dictionary as input and returns a sorted version of it based on the values. You can choose whether to sort in ascending or descending order.**

Ans:
"""

input_dict = {'Shivanshu': 3, 'data analysts': 1, 'pwskilss': 2}

ascending = True

sorted_items = sorted(input_dict.items(), key=lambda item: item[1], reverse=not ascending)

sorted_dict = dict(sorted_items)

print("Sorted Dictionary:", sorted_dict)

"""**35. Write a code that inverts a dictionary, swapping keys and values. Ensure that the inverted dictionary correctly handles cases where multiple keys have the same value by storing the keys as a list in the inverted dictionary.**

Ans:
"""

def invert_dict(d):
    inverted = {}
    for key, value in d.items():
        if value not in inverted:
            inverted[value] = [key]
        else:
            inverted[value].append(key)
    return inverted

original_dict = {'Shivanshu': 1, 'Parihar': 2, 'Singh': 1, 'is a good Boy': 3}

inverted_dict = invert_dict(original_dict)
print(inverted_dict)